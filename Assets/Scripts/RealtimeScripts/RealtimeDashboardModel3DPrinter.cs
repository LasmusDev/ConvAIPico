using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class RealtimeDashboardModel3DPrinter
{
    // https://normcore.io/documentation/realtime/synchronizing-custom-data.html#creating-a-realtime-model
    [RealtimeProperty(1, true, true)] // id, reliable?, change event
    private float _valueExplorer;

    [RealtimeProperty(2, true, true)]
    private float _valueSolid;

    [RealtimeProperty(3, true, true)]
    private float _valuePlus;

    [RealtimeProperty(4, true, true)] 
    private float _valuePro;
}


/* ----- Begin Normal Autogenerated Code ----- */
public partial class RealtimeDashboardModel3DPrinter : RealtimeModel {
    public float valueExplorer {
        get {
            return _valueExplorerProperty.value;
        }
        set {
            if (_valueExplorerProperty.value == value) return;
            _valueExplorerProperty.value = value;
            InvalidateReliableLength();
            FireValueExplorerDidChange(value);
        }
    }
    
    public float valueSolid {
        get {
            return _valueSolidProperty.value;
        }
        set {
            if (_valueSolidProperty.value == value) return;
            _valueSolidProperty.value = value;
            InvalidateReliableLength();
            FireValueSolidDidChange(value);
        }
    }
    
    public float valuePlus {
        get {
            return _valuePlusProperty.value;
        }
        set {
            if (_valuePlusProperty.value == value) return;
            _valuePlusProperty.value = value;
            InvalidateReliableLength();
            FireValuePlusDidChange(value);
        }
    }
    
    public float valuePro {
        get {
            return _valueProProperty.value;
        }
        set {
            if (_valueProProperty.value == value) return;
            _valueProProperty.value = value;
            InvalidateReliableLength();
            FireValueProDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(RealtimeDashboardModel3DPrinter model, T value);
    public event PropertyChangedHandler<float> valueExplorerDidChange;
    public event PropertyChangedHandler<float> valueSolidDidChange;
    public event PropertyChangedHandler<float> valuePlusDidChange;
    public event PropertyChangedHandler<float> valueProDidChange;
    
    public enum PropertyID : uint {
        ValueExplorer = 1,
        ValueSolid = 2,
        ValuePlus = 3,
        ValuePro = 4,
    }
    
    #region Properties
    
    private ReliableProperty<float> _valueExplorerProperty;
    
    private ReliableProperty<float> _valueSolidProperty;
    
    private ReliableProperty<float> _valuePlusProperty;
    
    private ReliableProperty<float> _valueProProperty;
    
    #endregion
    
    public RealtimeDashboardModel3DPrinter() : base(null) {
        _valueExplorerProperty = new ReliableProperty<float>(1, _valueExplorer);
        _valueSolidProperty = new ReliableProperty<float>(2, _valueSolid);
        _valuePlusProperty = new ReliableProperty<float>(3, _valuePlus);
        _valueProProperty = new ReliableProperty<float>(4, _valuePro);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _valueExplorerProperty.UnsubscribeCallback();
        _valueSolidProperty.UnsubscribeCallback();
        _valuePlusProperty.UnsubscribeCallback();
        _valueProProperty.UnsubscribeCallback();
    }
    
    private void FireValueExplorerDidChange(float value) {
        try {
            valueExplorerDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireValueSolidDidChange(float value) {
        try {
            valueSolidDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireValuePlusDidChange(float value) {
        try {
            valuePlusDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireValueProDidChange(float value) {
        try {
            valueProDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _valueExplorerProperty.WriteLength(context);
        length += _valueSolidProperty.WriteLength(context);
        length += _valuePlusProperty.WriteLength(context);
        length += _valueProProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _valueExplorerProperty.Write(stream, context);
        writes |= _valueSolidProperty.Write(stream, context);
        writes |= _valuePlusProperty.Write(stream, context);
        writes |= _valueProProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.ValueExplorer: {
                    changed = _valueExplorerProperty.Read(stream, context);
                    if (changed) FireValueExplorerDidChange(valueExplorer);
                    break;
                }
                case (uint) PropertyID.ValueSolid: {
                    changed = _valueSolidProperty.Read(stream, context);
                    if (changed) FireValueSolidDidChange(valueSolid);
                    break;
                }
                case (uint) PropertyID.ValuePlus: {
                    changed = _valuePlusProperty.Read(stream, context);
                    if (changed) FireValuePlusDidChange(valuePlus);
                    break;
                }
                case (uint) PropertyID.ValuePro: {
                    changed = _valueProProperty.Read(stream, context);
                    if (changed) FireValueProDidChange(valuePro);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _valueExplorer = valueExplorer;
        _valueSolid = valueSolid;
        _valuePlus = valuePlus;
        _valuePro = valuePro;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
