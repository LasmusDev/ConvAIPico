using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;
using Custom.Normal;

namespace Custom.Normal
{
    [RealtimeModel]
    public partial class RealtimeCustomAvatarModel
    {
        [RealtimeProperty(2, true)] private RealtimeCustomAvatar.DeviceType _deviceType;
        [RealtimeProperty(3, true)] private string _deviceModel;
        [RealtimeProperty(17, true, true)] private bool _pelvisActive;
        [RealtimeProperty(18, true, true)] private bool _spineActive;
        [RealtimeProperty(11, true, true)] private bool _leftThighActive;
        [RealtimeProperty(13, true, true)] private bool _leftCalfActive;
        [RealtimeProperty(15, true, true)] private bool _leftFootActive;
        [RealtimeProperty(12, true, true)] private bool _rightThighActive;
        [RealtimeProperty(14, true, true)] private bool _rightCalfActive;
        [RealtimeProperty(16, true, true)] private bool _rightFootActive;
        [RealtimeProperty(19, true, true)] private bool _spine1Active;
        [RealtimeProperty(20, true, true)] private bool _spine2Active;
        [RealtimeProperty(21, true, true)] private bool _neckActive;
        [RealtimeProperty(4, true, true)] private bool _headActive;
        [RealtimeProperty(7, true, true)] private bool _leftUpperArmActive;
        [RealtimeProperty(9, true, true)] private bool _leftForeArmActive;
        [RealtimeProperty(5, true, true)] private bool _leftHandActive;
        [RealtimeProperty(8, true, true)] private bool _rightUpperArmActive;
        [RealtimeProperty(10, true, true)] private bool _rightForeArmActive;
        [RealtimeProperty(6, true, true)] private bool _rightHandActive;
    }
}


/* ----- Begin Normal Autogenerated Code ----- */
namespace Custom.Normal {
    public partial class RealtimeCustomAvatarModel : RealtimeModel {
        public Custom.Normal.RealtimeCustomAvatar.DeviceType deviceType {
            get {
                return (Custom.Normal.RealtimeCustomAvatar.DeviceType) _deviceTypeProperty.value;
            }
            set {
                if (_deviceTypeProperty.value == (uint) value) return;
                _deviceTypeProperty.value = (uint) value;
                InvalidateReliableLength();
            }
        }
        
        public string deviceModel {
            get {
                return _deviceModelProperty.value;
            }
            set {
                if (_deviceModelProperty.value == value) return;
                _deviceModelProperty.value = value;
                InvalidateReliableLength();
            }
        }
        
        public bool pelvisActive {
            get {
                return _pelvisActiveProperty.value;
            }
            set {
                if (_pelvisActiveProperty.value == value) return;
                _pelvisActiveProperty.value = value;
                InvalidateReliableLength();
                FirePelvisActiveDidChange(value);
            }
        }
        
        public bool spineActive {
            get {
                return _spineActiveProperty.value;
            }
            set {
                if (_spineActiveProperty.value == value) return;
                _spineActiveProperty.value = value;
                InvalidateReliableLength();
                FireSpineActiveDidChange(value);
            }
        }
        
        public bool leftThighActive {
            get {
                return _leftThighActiveProperty.value;
            }
            set {
                if (_leftThighActiveProperty.value == value) return;
                _leftThighActiveProperty.value = value;
                InvalidateReliableLength();
                FireLeftThighActiveDidChange(value);
            }
        }
        
        public bool leftCalfActive {
            get {
                return _leftCalfActiveProperty.value;
            }
            set {
                if (_leftCalfActiveProperty.value == value) return;
                _leftCalfActiveProperty.value = value;
                InvalidateReliableLength();
                FireLeftCalfActiveDidChange(value);
            }
        }
        
        public bool leftFootActive {
            get {
                return _leftFootActiveProperty.value;
            }
            set {
                if (_leftFootActiveProperty.value == value) return;
                _leftFootActiveProperty.value = value;
                InvalidateReliableLength();
                FireLeftFootActiveDidChange(value);
            }
        }
        
        public bool rightThighActive {
            get {
                return _rightThighActiveProperty.value;
            }
            set {
                if (_rightThighActiveProperty.value == value) return;
                _rightThighActiveProperty.value = value;
                InvalidateReliableLength();
                FireRightThighActiveDidChange(value);
            }
        }
        
        public bool rightCalfActive {
            get {
                return _rightCalfActiveProperty.value;
            }
            set {
                if (_rightCalfActiveProperty.value == value) return;
                _rightCalfActiveProperty.value = value;
                InvalidateReliableLength();
                FireRightCalfActiveDidChange(value);
            }
        }
        
        public bool rightFootActive {
            get {
                return _rightFootActiveProperty.value;
            }
            set {
                if (_rightFootActiveProperty.value == value) return;
                _rightFootActiveProperty.value = value;
                InvalidateReliableLength();
                FireRightFootActiveDidChange(value);
            }
        }
        
        public bool spine1Active {
            get {
                return _spine1ActiveProperty.value;
            }
            set {
                if (_spine1ActiveProperty.value == value) return;
                _spine1ActiveProperty.value = value;
                InvalidateReliableLength();
                FireSpine1ActiveDidChange(value);
            }
        }
        
        public bool spine2Active {
            get {
                return _spine2ActiveProperty.value;
            }
            set {
                if (_spine2ActiveProperty.value == value) return;
                _spine2ActiveProperty.value = value;
                InvalidateReliableLength();
                FireSpine2ActiveDidChange(value);
            }
        }
        
        public bool neckActive {
            get {
                return _neckActiveProperty.value;
            }
            set {
                if (_neckActiveProperty.value == value) return;
                _neckActiveProperty.value = value;
                InvalidateReliableLength();
                FireNeckActiveDidChange(value);
            }
        }
        
        public bool headActive {
            get {
                return _headActiveProperty.value;
            }
            set {
                if (_headActiveProperty.value == value) return;
                _headActiveProperty.value = value;
                InvalidateReliableLength();
                FireHeadActiveDidChange(value);
            }
        }
        
        public bool leftUpperArmActive {
            get {
                return _leftUpperArmActiveProperty.value;
            }
            set {
                if (_leftUpperArmActiveProperty.value == value) return;
                _leftUpperArmActiveProperty.value = value;
                InvalidateReliableLength();
                FireLeftUpperArmActiveDidChange(value);
            }
        }
        
        public bool leftForeArmActive {
            get {
                return _leftForeArmActiveProperty.value;
            }
            set {
                if (_leftForeArmActiveProperty.value == value) return;
                _leftForeArmActiveProperty.value = value;
                InvalidateReliableLength();
                FireLeftForeArmActiveDidChange(value);
            }
        }
        
        public bool leftHandActive {
            get {
                return _leftHandActiveProperty.value;
            }
            set {
                if (_leftHandActiveProperty.value == value) return;
                _leftHandActiveProperty.value = value;
                InvalidateReliableLength();
                FireLeftHandActiveDidChange(value);
            }
        }
        
        public bool rightUpperArmActive {
            get {
                return _rightUpperArmActiveProperty.value;
            }
            set {
                if (_rightUpperArmActiveProperty.value == value) return;
                _rightUpperArmActiveProperty.value = value;
                InvalidateReliableLength();
                FireRightUpperArmActiveDidChange(value);
            }
        }
        
        public bool rightForeArmActive {
            get {
                return _rightForeArmActiveProperty.value;
            }
            set {
                if (_rightForeArmActiveProperty.value == value) return;
                _rightForeArmActiveProperty.value = value;
                InvalidateReliableLength();
                FireRightForeArmActiveDidChange(value);
            }
        }
        
        public bool rightHandActive {
            get {
                return _rightHandActiveProperty.value;
            }
            set {
                if (_rightHandActiveProperty.value == value) return;
                _rightHandActiveProperty.value = value;
                InvalidateReliableLength();
                FireRightHandActiveDidChange(value);
            }
        }
        
        public delegate void PropertyChangedHandler<in T>(RealtimeCustomAvatarModel model, T value);
        public event PropertyChangedHandler<bool> pelvisActiveDidChange;
        public event PropertyChangedHandler<bool> spineActiveDidChange;
        public event PropertyChangedHandler<bool> leftThighActiveDidChange;
        public event PropertyChangedHandler<bool> leftCalfActiveDidChange;
        public event PropertyChangedHandler<bool> leftFootActiveDidChange;
        public event PropertyChangedHandler<bool> rightThighActiveDidChange;
        public event PropertyChangedHandler<bool> rightCalfActiveDidChange;
        public event PropertyChangedHandler<bool> rightFootActiveDidChange;
        public event PropertyChangedHandler<bool> spine1ActiveDidChange;
        public event PropertyChangedHandler<bool> spine2ActiveDidChange;
        public event PropertyChangedHandler<bool> neckActiveDidChange;
        public event PropertyChangedHandler<bool> headActiveDidChange;
        public event PropertyChangedHandler<bool> leftUpperArmActiveDidChange;
        public event PropertyChangedHandler<bool> leftForeArmActiveDidChange;
        public event PropertyChangedHandler<bool> leftHandActiveDidChange;
        public event PropertyChangedHandler<bool> rightUpperArmActiveDidChange;
        public event PropertyChangedHandler<bool> rightForeArmActiveDidChange;
        public event PropertyChangedHandler<bool> rightHandActiveDidChange;
        
        public enum PropertyID : uint {
            DeviceType = 2,
            DeviceModel = 3,
            PelvisActive = 17,
            SpineActive = 18,
            LeftThighActive = 11,
            LeftCalfActive = 13,
            LeftFootActive = 15,
            RightThighActive = 12,
            RightCalfActive = 14,
            RightFootActive = 16,
            Spine1Active = 19,
            Spine2Active = 20,
            NeckActive = 21,
            HeadActive = 4,
            LeftUpperArmActive = 7,
            LeftForeArmActive = 9,
            LeftHandActive = 5,
            RightUpperArmActive = 8,
            RightForeArmActive = 10,
            RightHandActive = 6,
        }
        
        #region Properties
        
        private ReliableProperty<uint> _deviceTypeProperty;
        
        private ReliableProperty<string> _deviceModelProperty;
        
        private ReliableProperty<bool> _pelvisActiveProperty;
        
        private ReliableProperty<bool> _spineActiveProperty;
        
        private ReliableProperty<bool> _leftThighActiveProperty;
        
        private ReliableProperty<bool> _leftCalfActiveProperty;
        
        private ReliableProperty<bool> _leftFootActiveProperty;
        
        private ReliableProperty<bool> _rightThighActiveProperty;
        
        private ReliableProperty<bool> _rightCalfActiveProperty;
        
        private ReliableProperty<bool> _rightFootActiveProperty;
        
        private ReliableProperty<bool> _spine1ActiveProperty;
        
        private ReliableProperty<bool> _spine2ActiveProperty;
        
        private ReliableProperty<bool> _neckActiveProperty;
        
        private ReliableProperty<bool> _headActiveProperty;
        
        private ReliableProperty<bool> _leftUpperArmActiveProperty;
        
        private ReliableProperty<bool> _leftForeArmActiveProperty;
        
        private ReliableProperty<bool> _leftHandActiveProperty;
        
        private ReliableProperty<bool> _rightUpperArmActiveProperty;
        
        private ReliableProperty<bool> _rightForeArmActiveProperty;
        
        private ReliableProperty<bool> _rightHandActiveProperty;
        
        #endregion
        
        public RealtimeCustomAvatarModel() : base(null) {
            _deviceTypeProperty = new ReliableProperty<uint>(2, (uint) _deviceType);
            _deviceModelProperty = new ReliableProperty<string>(3, _deviceModel);
            _pelvisActiveProperty = new ReliableProperty<bool>(17, _pelvisActive);
            _spineActiveProperty = new ReliableProperty<bool>(18, _spineActive);
            _leftThighActiveProperty = new ReliableProperty<bool>(11, _leftThighActive);
            _leftCalfActiveProperty = new ReliableProperty<bool>(13, _leftCalfActive);
            _leftFootActiveProperty = new ReliableProperty<bool>(15, _leftFootActive);
            _rightThighActiveProperty = new ReliableProperty<bool>(12, _rightThighActive);
            _rightCalfActiveProperty = new ReliableProperty<bool>(14, _rightCalfActive);
            _rightFootActiveProperty = new ReliableProperty<bool>(16, _rightFootActive);
            _spine1ActiveProperty = new ReliableProperty<bool>(19, _spine1Active);
            _spine2ActiveProperty = new ReliableProperty<bool>(20, _spine2Active);
            _neckActiveProperty = new ReliableProperty<bool>(21, _neckActive);
            _headActiveProperty = new ReliableProperty<bool>(4, _headActive);
            _leftUpperArmActiveProperty = new ReliableProperty<bool>(7, _leftUpperArmActive);
            _leftForeArmActiveProperty = new ReliableProperty<bool>(9, _leftForeArmActive);
            _leftHandActiveProperty = new ReliableProperty<bool>(5, _leftHandActive);
            _rightUpperArmActiveProperty = new ReliableProperty<bool>(8, _rightUpperArmActive);
            _rightForeArmActiveProperty = new ReliableProperty<bool>(10, _rightForeArmActive);
            _rightHandActiveProperty = new ReliableProperty<bool>(6, _rightHandActive);
        }
        
        protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
            _deviceTypeProperty.UnsubscribeCallback();
            _deviceModelProperty.UnsubscribeCallback();
            _pelvisActiveProperty.UnsubscribeCallback();
            _spineActiveProperty.UnsubscribeCallback();
            _leftThighActiveProperty.UnsubscribeCallback();
            _leftCalfActiveProperty.UnsubscribeCallback();
            _leftFootActiveProperty.UnsubscribeCallback();
            _rightThighActiveProperty.UnsubscribeCallback();
            _rightCalfActiveProperty.UnsubscribeCallback();
            _rightFootActiveProperty.UnsubscribeCallback();
            _spine1ActiveProperty.UnsubscribeCallback();
            _spine2ActiveProperty.UnsubscribeCallback();
            _neckActiveProperty.UnsubscribeCallback();
            _headActiveProperty.UnsubscribeCallback();
            _leftUpperArmActiveProperty.UnsubscribeCallback();
            _leftForeArmActiveProperty.UnsubscribeCallback();
            _leftHandActiveProperty.UnsubscribeCallback();
            _rightUpperArmActiveProperty.UnsubscribeCallback();
            _rightForeArmActiveProperty.UnsubscribeCallback();
            _rightHandActiveProperty.UnsubscribeCallback();
        }
        
        private void FirePelvisActiveDidChange(bool value) {
            try {
                pelvisActiveDidChange?.Invoke(this, value);
            } catch (System.Exception exception) {
                UnityEngine.Debug.LogException(exception);
            }
        }
        
        private void FireSpineActiveDidChange(bool value) {
            try {
                spineActiveDidChange?.Invoke(this, value);
            } catch (System.Exception exception) {
                UnityEngine.Debug.LogException(exception);
            }
        }
        
        private void FireLeftThighActiveDidChange(bool value) {
            try {
                leftThighActiveDidChange?.Invoke(this, value);
            } catch (System.Exception exception) {
                UnityEngine.Debug.LogException(exception);
            }
        }
        
        private void FireLeftCalfActiveDidChange(bool value) {
            try {
                leftCalfActiveDidChange?.Invoke(this, value);
            } catch (System.Exception exception) {
                UnityEngine.Debug.LogException(exception);
            }
        }
        
        private void FireLeftFootActiveDidChange(bool value) {
            try {
                leftFootActiveDidChange?.Invoke(this, value);
            } catch (System.Exception exception) {
                UnityEngine.Debug.LogException(exception);
            }
        }
        
        private void FireRightThighActiveDidChange(bool value) {
            try {
                rightThighActiveDidChange?.Invoke(this, value);
            } catch (System.Exception exception) {
                UnityEngine.Debug.LogException(exception);
            }
        }
        
        private void FireRightCalfActiveDidChange(bool value) {
            try {
                rightCalfActiveDidChange?.Invoke(this, value);
            } catch (System.Exception exception) {
                UnityEngine.Debug.LogException(exception);
            }
        }
        
        private void FireRightFootActiveDidChange(bool value) {
            try {
                rightFootActiveDidChange?.Invoke(this, value);
            } catch (System.Exception exception) {
                UnityEngine.Debug.LogException(exception);
            }
        }
        
        private void FireSpine1ActiveDidChange(bool value) {
            try {
                spine1ActiveDidChange?.Invoke(this, value);
            } catch (System.Exception exception) {
                UnityEngine.Debug.LogException(exception);
            }
        }
        
        private void FireSpine2ActiveDidChange(bool value) {
            try {
                spine2ActiveDidChange?.Invoke(this, value);
            } catch (System.Exception exception) {
                UnityEngine.Debug.LogException(exception);
            }
        }
        
        private void FireNeckActiveDidChange(bool value) {
            try {
                neckActiveDidChange?.Invoke(this, value);
            } catch (System.Exception exception) {
                UnityEngine.Debug.LogException(exception);
            }
        }
        
        private void FireHeadActiveDidChange(bool value) {
            try {
                headActiveDidChange?.Invoke(this, value);
            } catch (System.Exception exception) {
                UnityEngine.Debug.LogException(exception);
            }
        }
        
        private void FireLeftUpperArmActiveDidChange(bool value) {
            try {
                leftUpperArmActiveDidChange?.Invoke(this, value);
            } catch (System.Exception exception) {
                UnityEngine.Debug.LogException(exception);
            }
        }
        
        private void FireLeftForeArmActiveDidChange(bool value) {
            try {
                leftForeArmActiveDidChange?.Invoke(this, value);
            } catch (System.Exception exception) {
                UnityEngine.Debug.LogException(exception);
            }
        }
        
        private void FireLeftHandActiveDidChange(bool value) {
            try {
                leftHandActiveDidChange?.Invoke(this, value);
            } catch (System.Exception exception) {
                UnityEngine.Debug.LogException(exception);
            }
        }
        
        private void FireRightUpperArmActiveDidChange(bool value) {
            try {
                rightUpperArmActiveDidChange?.Invoke(this, value);
            } catch (System.Exception exception) {
                UnityEngine.Debug.LogException(exception);
            }
        }
        
        private void FireRightForeArmActiveDidChange(bool value) {
            try {
                rightForeArmActiveDidChange?.Invoke(this, value);
            } catch (System.Exception exception) {
                UnityEngine.Debug.LogException(exception);
            }
        }
        
        private void FireRightHandActiveDidChange(bool value) {
            try {
                rightHandActiveDidChange?.Invoke(this, value);
            } catch (System.Exception exception) {
                UnityEngine.Debug.LogException(exception);
            }
        }
        
        protected override int WriteLength(StreamContext context) {
            var length = 0;
            length += _deviceTypeProperty.WriteLength(context);
            length += _deviceModelProperty.WriteLength(context);
            length += _pelvisActiveProperty.WriteLength(context);
            length += _spineActiveProperty.WriteLength(context);
            length += _leftThighActiveProperty.WriteLength(context);
            length += _leftCalfActiveProperty.WriteLength(context);
            length += _leftFootActiveProperty.WriteLength(context);
            length += _rightThighActiveProperty.WriteLength(context);
            length += _rightCalfActiveProperty.WriteLength(context);
            length += _rightFootActiveProperty.WriteLength(context);
            length += _spine1ActiveProperty.WriteLength(context);
            length += _spine2ActiveProperty.WriteLength(context);
            length += _neckActiveProperty.WriteLength(context);
            length += _headActiveProperty.WriteLength(context);
            length += _leftUpperArmActiveProperty.WriteLength(context);
            length += _leftForeArmActiveProperty.WriteLength(context);
            length += _leftHandActiveProperty.WriteLength(context);
            length += _rightUpperArmActiveProperty.WriteLength(context);
            length += _rightForeArmActiveProperty.WriteLength(context);
            length += _rightHandActiveProperty.WriteLength(context);
            return length;
        }
        
        protected override void Write(WriteStream stream, StreamContext context) {
            var writes = false;
            writes |= _deviceTypeProperty.Write(stream, context);
            writes |= _deviceModelProperty.Write(stream, context);
            writes |= _pelvisActiveProperty.Write(stream, context);
            writes |= _spineActiveProperty.Write(stream, context);
            writes |= _leftThighActiveProperty.Write(stream, context);
            writes |= _leftCalfActiveProperty.Write(stream, context);
            writes |= _leftFootActiveProperty.Write(stream, context);
            writes |= _rightThighActiveProperty.Write(stream, context);
            writes |= _rightCalfActiveProperty.Write(stream, context);
            writes |= _rightFootActiveProperty.Write(stream, context);
            writes |= _spine1ActiveProperty.Write(stream, context);
            writes |= _spine2ActiveProperty.Write(stream, context);
            writes |= _neckActiveProperty.Write(stream, context);
            writes |= _headActiveProperty.Write(stream, context);
            writes |= _leftUpperArmActiveProperty.Write(stream, context);
            writes |= _leftForeArmActiveProperty.Write(stream, context);
            writes |= _leftHandActiveProperty.Write(stream, context);
            writes |= _rightUpperArmActiveProperty.Write(stream, context);
            writes |= _rightForeArmActiveProperty.Write(stream, context);
            writes |= _rightHandActiveProperty.Write(stream, context);
            if (writes) InvalidateContextLength(context);
        }
        
        protected override void Read(ReadStream stream, StreamContext context) {
            var anyPropertiesChanged = false;
            while (stream.ReadNextPropertyID(out uint propertyID)) {
                var changed = false;
                switch (propertyID) {
                    case (uint) PropertyID.DeviceType: {
                        changed = _deviceTypeProperty.Read(stream, context);
                        break;
                    }
                    case (uint) PropertyID.DeviceModel: {
                        changed = _deviceModelProperty.Read(stream, context);
                        break;
                    }
                    case (uint) PropertyID.PelvisActive: {
                        changed = _pelvisActiveProperty.Read(stream, context);
                        if (changed) FirePelvisActiveDidChange(pelvisActive);
                        break;
                    }
                    case (uint) PropertyID.SpineActive: {
                        changed = _spineActiveProperty.Read(stream, context);
                        if (changed) FireSpineActiveDidChange(spineActive);
                        break;
                    }
                    case (uint) PropertyID.LeftThighActive: {
                        changed = _leftThighActiveProperty.Read(stream, context);
                        if (changed) FireLeftThighActiveDidChange(leftThighActive);
                        break;
                    }
                    case (uint) PropertyID.LeftCalfActive: {
                        changed = _leftCalfActiveProperty.Read(stream, context);
                        if (changed) FireLeftCalfActiveDidChange(leftCalfActive);
                        break;
                    }
                    case (uint) PropertyID.LeftFootActive: {
                        changed = _leftFootActiveProperty.Read(stream, context);
                        if (changed) FireLeftFootActiveDidChange(leftFootActive);
                        break;
                    }
                    case (uint) PropertyID.RightThighActive: {
                        changed = _rightThighActiveProperty.Read(stream, context);
                        if (changed) FireRightThighActiveDidChange(rightThighActive);
                        break;
                    }
                    case (uint) PropertyID.RightCalfActive: {
                        changed = _rightCalfActiveProperty.Read(stream, context);
                        if (changed) FireRightCalfActiveDidChange(rightCalfActive);
                        break;
                    }
                    case (uint) PropertyID.RightFootActive: {
                        changed = _rightFootActiveProperty.Read(stream, context);
                        if (changed) FireRightFootActiveDidChange(rightFootActive);
                        break;
                    }
                    case (uint) PropertyID.Spine1Active: {
                        changed = _spine1ActiveProperty.Read(stream, context);
                        if (changed) FireSpine1ActiveDidChange(spine1Active);
                        break;
                    }
                    case (uint) PropertyID.Spine2Active: {
                        changed = _spine2ActiveProperty.Read(stream, context);
                        if (changed) FireSpine2ActiveDidChange(spine2Active);
                        break;
                    }
                    case (uint) PropertyID.NeckActive: {
                        changed = _neckActiveProperty.Read(stream, context);
                        if (changed) FireNeckActiveDidChange(neckActive);
                        break;
                    }
                    case (uint) PropertyID.HeadActive: {
                        changed = _headActiveProperty.Read(stream, context);
                        if (changed) FireHeadActiveDidChange(headActive);
                        break;
                    }
                    case (uint) PropertyID.LeftUpperArmActive: {
                        changed = _leftUpperArmActiveProperty.Read(stream, context);
                        if (changed) FireLeftUpperArmActiveDidChange(leftUpperArmActive);
                        break;
                    }
                    case (uint) PropertyID.LeftForeArmActive: {
                        changed = _leftForeArmActiveProperty.Read(stream, context);
                        if (changed) FireLeftForeArmActiveDidChange(leftForeArmActive);
                        break;
                    }
                    case (uint) PropertyID.LeftHandActive: {
                        changed = _leftHandActiveProperty.Read(stream, context);
                        if (changed) FireLeftHandActiveDidChange(leftHandActive);
                        break;
                    }
                    case (uint) PropertyID.RightUpperArmActive: {
                        changed = _rightUpperArmActiveProperty.Read(stream, context);
                        if (changed) FireRightUpperArmActiveDidChange(rightUpperArmActive);
                        break;
                    }
                    case (uint) PropertyID.RightForeArmActive: {
                        changed = _rightForeArmActiveProperty.Read(stream, context);
                        if (changed) FireRightForeArmActiveDidChange(rightForeArmActive);
                        break;
                    }
                    case (uint) PropertyID.RightHandActive: {
                        changed = _rightHandActiveProperty.Read(stream, context);
                        if (changed) FireRightHandActiveDidChange(rightHandActive);
                        break;
                    }
                    default: {
                        stream.SkipProperty();
                        break;
                    }
                }
                anyPropertiesChanged |= changed;
            }
            if (anyPropertiesChanged) {
                UpdateBackingFields();
            }
        }
        
        private void UpdateBackingFields() {
            _deviceType = deviceType;
            _deviceModel = deviceModel;
            _pelvisActive = pelvisActive;
            _spineActive = spineActive;
            _leftThighActive = leftThighActive;
            _leftCalfActive = leftCalfActive;
            _leftFootActive = leftFootActive;
            _rightThighActive = rightThighActive;
            _rightCalfActive = rightCalfActive;
            _rightFootActive = rightFootActive;
            _spine1Active = spine1Active;
            _spine2Active = spine2Active;
            _neckActive = neckActive;
            _headActive = headActive;
            _leftUpperArmActive = leftUpperArmActive;
            _leftForeArmActive = leftForeArmActive;
            _leftHandActive = leftHandActive;
            _rightUpperArmActive = rightUpperArmActive;
            _rightForeArmActive = rightForeArmActive;
            _rightHandActive = rightHandActive;
        }
        
    }
}
/* ----- End Normal Autogenerated Code ----- */
